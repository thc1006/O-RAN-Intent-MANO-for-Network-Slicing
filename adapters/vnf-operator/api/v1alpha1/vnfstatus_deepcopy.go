// Code generated by manual implementation. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VNFStatus) DeepCopyInto(out *VNFStatus) {
	*out = *in
	if in.LastReconcileTime != nil {
		in, out := &in.LastReconcileTime, &out.LastReconcileTime
		*out = (*in).DeepCopy()
	}
	if in.DeployedClusters != nil {
		in, out := &in.DeployedClusters, &out.DeployedClusters
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]metav1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Instances != nil {
		in, out := &in.Instances, &out.Instances
		*out = make([]VNFInstance, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VNFStatus.
func (in *VNFStatus) DeepCopy() *VNFStatus {
	if in == nil {
		return nil
	}
	out := new(VNFStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VNFInstance) DeepCopyInto(out *VNFInstance) {
	*out = *in
	if in.Endpoints != nil {
		in, out := &in.Endpoints, &out.Endpoints
		*out = make([]VNFEndpoint, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VNFInstance.
func (in *VNFInstance) DeepCopy() *VNFInstance {
	if in == nil {
		return nil
	}
	out := new(VNFInstance)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VNFEndpoint) DeepCopyInto(out *VNFEndpoint) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VNFEndpoint.
func (in *VNFEndpoint) DeepCopy() *VNFEndpoint {
	if in == nil {
		return nil
	}
	out := new(VNFEndpoint)
	in.DeepCopyInto(out)
	return out
}