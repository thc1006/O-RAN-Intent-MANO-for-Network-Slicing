---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin-credentials
  namespace: oran-monitoring
  labels:
    app: grafana
    component: monitoring
type: Opaque
data:
  admin-user: YWRtaW4=  # admin
  admin-password: b3Jhbi1hZG1pbi0yMDI0  # oran-admin-2024
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: oran-monitoring
  labels:
    app: grafana
    component: monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus-kube-prometheus-prometheus.oran-monitoring.svc.cluster.local:9090
      isDefault: true
      editable: true
      jsonData:
        timeInterval: 30s
        queryTimeout: 60s
        httpMethod: POST
      version: 1
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-providers
  namespace: oran-monitoring
  labels:
    app: grafana
    component: monitoring
data:
  providers.yaml: |
    apiVersion: 1
    providers:
    - name: 'oran-dashboards'
      orgId: 1
      folder: 'O-RAN MANO'
      type: file
      disableDeletion: false
      editable: true
      updateIntervalSeconds: 30
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards/oran-dashboards
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: oran-monitoring
  labels:
    app: grafana
    component: monitoring
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: oran-monitoring
  labels:
    app: grafana
    component: monitoring
    version: v1.0.0
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
        version: v1.0.0
      annotations:
        checksum/config-datasources: "{{ include (print $.Template.BasePath \"/grafana-datasources-configmap.yaml\") . | sha256sum }}"
        checksum/config-providers: "{{ include (print $.Template.BasePath \"/grafana-dashboard-providers-configmap.yaml\") . | sha256sum }}"
    spec:
      serviceAccountName: grafana
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.2.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: grafana-admin-credentials
              key: admin-user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-admin-credentials
              key: admin-password
        - name: GF_PATHS_DATA
          value: /var/lib/grafana
        - name: GF_PATHS_LOGS
          value: /var/log/grafana
        - name: GF_PATHS_PLUGINS
          value: /var/lib/grafana/plugins
        - name: GF_PATHS_PROVISIONING
          value: /etc/grafana/provisioning
        - name: GF_SERVER_HTTP_PORT
          value: "3000"
        - name: GF_SERVER_PROTOCOL
          value: http
        - name: GF_SERVER_DOMAIN
          value: grafana.oran-monitoring.svc.cluster.local
        - name: GF_SERVER_ROOT_URL
          value: "%(protocol)s://%(domain)s:%(http_port)s/"
        - name: GF_LOG_MODE
          value: console
        - name: GF_LOG_LEVEL
          value: info
        - name: GF_METRICS_ENABLED
          value: "true"
        - name: GF_ALERTING_ENABLED
          value: "true"
        - name: GF_EXPLORE_ENABLED
          value: "true"
        - name: GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH
          value: /var/lib/grafana/dashboards/oran-dashboards/oran-overview-dashboard.json
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: datasources
          mountPath: /etc/grafana/provisioning/datasources
          readOnly: true
        - name: dashboard-providers
          mountPath: /etc/grafana/provisioning/dashboards
          readOnly: true
        - name: oran-dashboards
          mountPath: /var/lib/grafana/dashboards/oran-dashboards
          readOnly: true
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: 100Mi
            cpu: 50m
          limits:
            memory: 300Mi
            cpu: 200m
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 472
          runAsGroup: 472
          capabilities:
            drop:
            - ALL
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage
      - name: datasources
        configMap:
          name: grafana-datasources
      - name: dashboard-providers
        configMap:
          name: grafana-dashboard-providers
      - name: oran-dashboards
        configMap:
          name: oran-grafana-dashboards
      restartPolicy: Always
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: oran-monitoring
  labels:
    app: grafana
    component: monitoring
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: oran-monitoring
  labels:
    app: grafana
    component: monitoring
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app: grafana