---
# Network Policy for Orchestrator - Enhanced Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: oran-orchestrator-netpol
  namespace: oran-mano
  labels:
    app.kubernetes.io/name: oran-orchestrator
    app.kubernetes.io/component: orchestrator
    security.policy/type: "strict"
  annotations:
    security.policy/description: "Least-privilege network policy for O-RAN orchestrator"
    security.policy/traffic-patterns: |
      Ingress: HTTP API (8080), Metrics (9090) from same namespace and monitoring
      Egress: DNS, DMS services, Porch API, O2IMS API
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: oran-orchestrator
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow HTTP API access from same namespace only
  - from:
    - namespaceSelector:
        matchLabels:
          name: oran-mano
    ports:
    - protocol: TCP
      port: 8080  # HTTP API
  # Allow metrics scraping from monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
      podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    ports:
    - protocol: TCP
      port: 9090  # Metrics
  egress:
  # Allow DNS resolution (strict)
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow DNS to CoreDNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          k8s-app: coredns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow communication to RAN DMS (same namespace)
  - to:
    - namespaceSelector:
        matchLabels:
          name: oran-mano
      podSelector:
        matchLabels:
          app.kubernetes.io/name: oran-ran-dms
    ports:
    - protocol: TCP
      port: 8080
  # Allow communication to CN DMS (same namespace)
  - to:
    - namespaceSelector:
        matchLabels:
          name: oran-mano
      podSelector:
        matchLabels:
          app.kubernetes.io/name: oran-cn-dms
    ports:
    - protocol: TCP
      port: 8080
  # Allow communication to Porch API server
  - to:
    - namespaceSelector:
        matchLabels:
          name: porch-system
      podSelector:
        matchLabels:
          app: porch-server
    ports:
    - protocol: TCP
      port: 7007
  # Allow communication to O2IMS server (same namespace)
  - to:
    - namespaceSelector:
        matchLabels:
          name: oran-mano
      podSelector:
        matchLabels:
          app.kubernetes.io/name: o2ims-server
    ports:
    - protocol: TCP
      port: 5005

---
# Network Policy for VNF Operator - Enhanced Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: oran-vnf-operator-netpol
  namespace: oran-mano
  labels:
    app.kubernetes.io/name: oran-vnf-operator
    app.kubernetes.io/component: vnf-operator
    security.policy/type: "strict"
  annotations:
    security.policy/description: "Least-privilege network policy for VNF operator with secure webhook access"
    security.policy/traffic-patterns: |
      Ingress: Metrics (8080) from monitoring, Health (8081) from same namespace, Webhook (9443) from API server
      Egress: DNS, Kubernetes API, RAN DMS, Porch API
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: oran-vnf-operator
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow health checks from same namespace (liveness/readiness probes)
  - from:
    - namespaceSelector:
        matchLabels:
          name: oran-mano
    ports:
    - protocol: TCP
      port: 8081  # Health endpoint
  # Allow metrics scraping from monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
      podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    ports:
    - protocol: TCP
      port: 8080  # Metrics
  # Allow webhook calls from Kubernetes API server (admission controllers)
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          component: kube-apiserver
    ports:
    - protocol: TCP
      port: 9443  # Webhook
  # Allow webhook calls from admission controllers in kube-system
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 9443  # Webhook
  egress:
  # Allow DNS resolution (strict)
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow DNS to CoreDNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          k8s-app: coredns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow Kubernetes API access (controller needs to watch/update resources)
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          component: kube-apiserver
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 6443
  # Allow communication to RAN DMS (same namespace)
  - to:
    - namespaceSelector:
        matchLabels:
          name: oran-mano
      podSelector:
        matchLabels:
          app.kubernetes.io/name: oran-ran-dms
    ports:
    - protocol: TCP
      port: 8080
  # Allow communication to Porch API server
  - to:
    - namespaceSelector:
        matchLabels:
          name: porch-system
      podSelector:
        matchLabels:
          app: porch-server
    ports:
    - protocol: TCP
      port: 7007

---
# Network Policy for RAN DMS - Enhanced Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: oran-ran-dms-netpol
  namespace: oran-mano
  labels:
    app.kubernetes.io/name: oran-ran-dms
    app.kubernetes.io/component: ran-dms
    security.policy/type: "strict"
  annotations:
    security.policy/description: "Least-privilege network policy for RAN Domain Management Service"
    security.policy/traffic-patterns: |
      Ingress: API (8080) from orchestrator and vnf-operator, Metrics (9090) from monitoring
      Egress: DNS, Kubernetes API
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: oran-ran-dms
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from orchestrator and vnf-operator (same namespace)
  - from:
    - namespaceSelector:
        matchLabels:
          name: oran-mano
      podSelector:
        matchLabels:
          app.kubernetes.io/name: oran-orchestrator
    - namespaceSelector:
        matchLabels:
          name: oran-mano
      podSelector:
        matchLabels:
          app.kubernetes.io/name: oran-vnf-operator
    ports:
    - protocol: TCP
      port: 8080
  # Allow metrics scraping from monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
      podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    ports:
    - protocol: TCP
      port: 9090
  egress:
  # Allow DNS resolution (strict)
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow DNS to CoreDNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          k8s-app: coredns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow Kubernetes API access (strict)
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          component: kube-apiserver
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 6443

---
# Network Policy for CN DMS - Enhanced Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: oran-cn-dms-netpol
  namespace: oran-mano
  labels:
    app.kubernetes.io/name: oran-cn-dms
    app.kubernetes.io/component: cn-dms
    security.policy/type: "strict"
  annotations:
    security.policy/description: "Least-privilege network policy for CN Domain Management Service"
    security.policy/traffic-patterns: |
      Ingress: API (8080) from orchestrator, Metrics (9090) from monitoring
      Egress: DNS, Kubernetes API
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: oran-cn-dms
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from orchestrator (same namespace)
  - from:
    - namespaceSelector:
        matchLabels:
          name: oran-mano
      podSelector:
        matchLabels:
          app.kubernetes.io/name: oran-orchestrator
    ports:
    - protocol: TCP
      port: 8080
  # Allow metrics scraping from monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
      podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    ports:
    - protocol: TCP
      port: 9090
  egress:
  # Allow DNS resolution (strict)
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow DNS to CoreDNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          k8s-app: coredns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow Kubernetes API access (strict)
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          component: kube-apiserver
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 6443

---
# Network Policy for TN Manager - Enhanced Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: oran-tn-manager-netpol
  namespace: oran-mano
  labels:
    app.kubernetes.io/name: oran-tn-manager
    app.kubernetes.io/component: tn-manager
    security.policy/type: "strict"
  annotations:
    security.policy/description: "Least-privilege network policy for Transport Network Manager"
    security.policy/traffic-patterns: |
      Ingress: API (8080) from orchestrator, Metrics (9090) from monitoring
      Egress: DNS, TN Agents
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: oran-tn-manager
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from orchestrator (same namespace)
  - from:
    - namespaceSelector:
        matchLabels:
          name: oran-mano
      podSelector:
        matchLabels:
          app.kubernetes.io/name: oran-orchestrator
    ports:
    - protocol: TCP
      port: 8080
  # Allow metrics scraping from monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
      podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    ports:
    - protocol: TCP
      port: 9090
  egress:
  # Allow DNS resolution (strict)
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow DNS to CoreDNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          k8s-app: coredns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow communication to TN Agents (same namespace)
  - to:
    - namespaceSelector:
        matchLabels:
          name: oran-mano
      podSelector:
        matchLabels:
          app.kubernetes.io/name: oran-tn-agent
    ports:
    - protocol: TCP
      port: 8080

---
# Network Policy for TN Agent - Enhanced Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: oran-tn-agent-netpol
  namespace: oran-mano
  labels:
    app.kubernetes.io/name: oran-tn-agent
    app.kubernetes.io/component: tn-agent
    security.policy/type: "strict"
  annotations:
    security.policy/description: "Least-privilege network policy for Transport Network Agent with testing capabilities"
    security.policy/traffic-patterns: |
      Ingress: API (8080) from TN Manager, iperf3 (5201) for network testing
      Egress: DNS, network connectivity tests to specific namespaces
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: oran-tn-agent
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from TN Manager (same namespace)
  - from:
    - namespaceSelector:
        matchLabels:
          name: oran-mano
      podSelector:
        matchLabels:
          app.kubernetes.io/name: oran-tn-manager
    ports:
    - protocol: TCP
      port: 8080
  # Allow iperf3 traffic for testing (same namespace)
  - from:
    - namespaceSelector:
        matchLabels:
          name: oran-mano
      podSelector: {}
    ports:
    - protocol: TCP
      port: 5201
    - protocol: UDP
      port: 5201
  egress:
  # Allow DNS resolution (strict)
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow DNS to CoreDNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          k8s-app: coredns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow egress for network connectivity tests (restricted to test namespaces)
  - to:
    - namespaceSelector:
        matchLabels:
          name: oran-mano
      podSelector: {}
    ports:
    - protocol: TCP
      port: 5201  # iperf3
    - protocol: UDP
      port: 5201  # iperf3
  # Allow egress to test environments only
  - to:
    - namespaceSelector:
        matchLabels:
          environment: test
    ports:
    - protocol: TCP
      port: 5201

---
# Default deny-all policy for the namespace - Enhanced Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: oran-mano
  labels:
    security.policy/type: "default-deny"
  annotations:
    security.policy/description: "Default deny-all policy with minimal DNS access for security baseline"
    security.policy/purpose: "Provides zero-trust baseline - all traffic must be explicitly allowed"
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  egress:
  # Allow DNS for all pods (strict to kube-system)
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow DNS to CoreDNS for all pods
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          k8s-app: coredns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53