---
# Pod Security Policy for O-RAN MANO Components
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: oran-mano-restricted
  namespace: oran-mano
  labels:
    app.kubernetes.io/name: oran-mano
    app.kubernetes.io/component: security-policy
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: true
  seccompProfile:
    type: RuntimeDefault
---
# ClusterRole for PodSecurityPolicy
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: oran-mano-psp-user
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs: ['use']
  resourceNames:
  - oran-mano-restricted
---
# ClusterRoleBinding for PodSecurityPolicy
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: oran-mano-psp-binding
roleRef:
  kind: ClusterRole
  name: oran-mano-psp-user
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: oran-orchestrator
  namespace: oran-mano
- kind: ServiceAccount
  name: oran-vnf-operator
  namespace: oran-mano
- kind: ServiceAccount
  name: oran-o2-client
  namespace: oran-mano
- kind: ServiceAccount
  name: oran-tn-manager
  namespace: oran-mano
---
# Network Policy to deny all traffic by default (more restrictive)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-all-default
  namespace: oran-mano
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  # This policy denies all traffic by default
  # Specific policies will override this for required communication
---
# Security Context Constraints (OpenShift) / Pod Security Standards
apiVersion: v1
kind: LimitRange
metadata:
  name: oran-mano-security-limits
  namespace: oran-mano
spec:
  limits:
  - default:
      cpu: "100m"
      memory: "128Mi"
      ephemeral-storage: "1Gi"
    defaultRequest:
      cpu: "50m"
      memory: "64Mi"
      ephemeral-storage: "512Mi"
    max:
      cpu: "2000m"
      memory: "2Gi"
      ephemeral-storage: "10Gi"
    min:
      cpu: "10m"
      memory: "32Mi"
      ephemeral-storage: "256Mi"
    type: Container
  - default:
      cpu: "500m"
      memory: "512Mi"
      ephemeral-storage: "2Gi"
    defaultRequest:
      cpu: "100m"
      memory: "128Mi"
      ephemeral-storage: "1Gi"
    max:
      cpu: "4000m"
      memory: "4Gi"
      ephemeral-storage: "20Gi"
    min:
      cpu: "50m"
      memory: "64Mi"
      ephemeral-storage: "512Mi"
    type: Pod
---
# Resource Quota for namespace
apiVersion: v1
kind: ResourceQuota
metadata:
  name: oran-mano-resource-quota
  namespace: oran-mano
spec:
  hard:
    requests.cpu: "2000m"
    requests.memory: "4Gi"
    requests.ephemeral-storage: "10Gi"
    limits.cpu: "8000m"
    limits.memory: "16Gi"
    limits.ephemeral-storage: "50Gi"
    persistentvolumeclaims: "10"
    services: "20"
    secrets: "20"
    configmaps: "20"
    pods: "20"
---
# Security-focused ValidatingAdmissionWebhook configuration
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionWebhook
metadata:
  name: oran-security-validator
spec:
  clientConfig:
    service:
      name: oran-security-validator
      namespace: oran-mano
      path: "/validate"
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["apps"]
    apiVersions: ["v1"]
    resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  namespaceSelector:
    matchLabels:
      name: oran-mano
  admissionReviewVersions: ["v1", "v1beta1"]
  sideEffects: None
  failurePolicy: Fail
---
# Distroless base image policy (Gatekeeper/OPA if available)
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequiredbaseimage
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredBaseImage
      validation:
        type: object
        properties:
          allowedImages:
            type: array
            items:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequiredbaseimage

        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not starts_with_allowed_image(container.image)
          msg := sprintf("Container <%v> uses disallowed image <%v>", [container.name, container.image])
        }

        starts_with_allowed_image(image) {
          allowed_image := input.parameters.allowedImages[_]
          startswith(image, allowed_image)
        }
---
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequiredBaseImage
metadata:
  name: must-use-secure-base-images
spec:
  match:
    kinds:
      - apiGroups: ["apps"]
        kinds: ["Deployment"]
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces: ["oran-mano", "oran-edge", "oran-core"]
  parameters:
    allowedImages:
      - "ghcr.io/oran-mano/"
      - "gcr.io/distroless/"
      - "chainguard.dev/"
      - "registry.access.redhat.com/ubi8/ubi-minimal"