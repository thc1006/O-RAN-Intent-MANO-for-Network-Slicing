---
# External Secrets Operator for secure secrets management
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oran-secrets-manager
  namespace: oran-mano
  labels:
    app.kubernetes.io/name: oran-secrets-manager
    app.kubernetes.io/component: secrets-management
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: oran-secrets-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: oran-secrets-manager
        app.kubernetes.io/component: secrets-management
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: runtime/default
        container.apparmor.security.beta.kubernetes.io/secrets-manager: runtime/default
    spec:
      serviceAccountName: oran-secrets-manager
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: secrets-manager
        image: ghcr.io/oran-mano/secrets-manager:v1.0.0@sha256:abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: SECRET_BACKEND
          value: "kubernetes"
        - name: ENCRYPTION_KEY_PATH
          value: "/etc/encryption/key"
        - name: LOG_LEVEL
          value: "info"
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
            ephemeral-storage: 1Gi
          requests:
            cpu: 100m
            memory: 128Mi
            ephemeral-storage: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65532
          runAsGroup: 65532
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - name: encryption-key
          mountPath: /etc/encryption
          readOnly: true
        - name: temp
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: encryption-key
        secret:
          secretName: oran-encryption-key
          defaultMode: 0400
      - name: temp
        emptyDir: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: oran-secrets-manager
  namespace: oran-mano
  labels:
    app.kubernetes.io/name: oran-secrets-manager
    app.kubernetes.io/component: secrets-management
automountServiceAccountToken: false
---
apiVersion: v1
kind: Service
metadata:
  name: oran-secrets-manager
  namespace: oran-mano
  labels:
    app.kubernetes.io/name: oran-secrets-manager
    app.kubernetes.io/component: secrets-management
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: oran-secrets-manager
---
# Sealed Secrets for GitOps secret management
apiVersion: v1
kind: ConfigMap
metadata:
  name: sealed-secrets-config
  namespace: oran-mano
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: secrets-encryption
data:
  config.yaml: |
    controller:
      create: true
      secretName: "sealed-secrets-key"
      image:
        repository: "quay.io/bitnami/sealed-secrets-controller"
        tag: "v0.18.0"
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 50m
          memory: 64Mi
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        capabilities:
          drop:
          - ALL
---
# Secret rotation job
apiVersion: batch/v1
kind: CronJob
metadata:
  name: oran-secret-rotation
  namespace: oran-mano
  labels:
    app.kubernetes.io/name: oran-secret-rotation
    app.kubernetes.io/component: secrets-rotation
spec:
  schedule: "0 2 * * 0"  # Weekly at 2 AM on Sundays
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            seccomp.security.alpha.kubernetes.io/pod: runtime/default
            container.apparmor.security.beta.kubernetes.io/rotator: runtime/default
        spec:
          serviceAccountName: oran-secret-rotator
          automountServiceAccountToken: false
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            runAsGroup: 65532
            fsGroup: 65532
            seccompProfile:
              type: RuntimeDefault
          containers:
          - name: secret-rotator
            image: ghcr.io/oran-mano/secret-rotator:v1.0.0@sha256:1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef
            imagePullPolicy: IfNotPresent
            env:
            - name: NAMESPACE
              value: "oran-mano"
            - name: SECRET_PREFIX
              value: "oran-"
            - name: ROTATION_DAYS
              value: "30"
            resources:
              limits:
                cpu: 100m
                memory: 128Mi
                ephemeral-storage: 512Mi
              requests:
                cpu: 50m
                memory: 64Mi
                ephemeral-storage: 256Mi
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 65532
              runAsGroup: 65532
              capabilities:
                drop:
                - ALL
              seccompProfile:
                type: RuntimeDefault
            volumeMounts:
            - name: temp
              mountPath: /tmp
          volumes:
          - name: temp
            emptyDir: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: oran-secret-rotator
  namespace: oran-mano
  labels:
    app.kubernetes.io/name: oran-secret-rotator
    app.kubernetes.io/component: secrets-rotation
automountServiceAccountToken: false
---
# RBAC for Secrets Management
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: oran-secrets-manager
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: oran-secrets-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: oran-secrets-manager
subjects:
- kind: ServiceAccount
  name: oran-secrets-manager
  namespace: oran-mano
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: oran-mano
  name: oran-secret-rotator
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: oran-secret-rotator
  namespace: oran-mano
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: oran-secret-rotator
subjects:
- kind: ServiceAccount
  name: oran-secret-rotator
  namespace: oran-mano
---
# Example encrypted secret template
apiVersion: v1
kind: Secret
metadata:
  name: oran-tls-secret-template
  namespace: oran-mano
  labels:
    app.kubernetes.io/name: oran-tls-secret
    app.kubernetes.io/component: tls-certificate
  annotations:
    cert-manager.io/issuer: "oran-ca-issuer"
    secrets.oran.io/rotation-policy: "30-days"
    secrets.oran.io/encryption: "aes-256-gcm"
type: kubernetes.io/tls
data:
  # These will be populated by cert-manager
  tls.crt: ""
  tls.key: ""
---
# Secret policy for enforcement
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-security-policy
  namespace: oran-mano
  labels:
    app.kubernetes.io/name: secret-security-policy
    app.kubernetes.io/component: security-policy
data:
  policy.yaml: |
    secretSecurityPolicy:
      # Encryption requirements
      encryption:
        required: true
        algorithm: "aes-256-gcm"
        keyRotationDays: 30

      # Access controls
      access:
        requireServiceAccountBinding: true
        maxAccessDurationHours: 24
        auditAccess: true

      # Secret lifecycle
      lifecycle:
        maxAgeDays: 90
        rotationWarningDays: 7
        automaticRotation: true

      # Compliance
      compliance:
        requireAnnotations:
          - "secrets.oran.io/classification"
          - "secrets.oran.io/rotation-policy"
        forbiddenKeys:
          - "password"
          - "secret"
          - "token"
        requireBase64Encoding: true