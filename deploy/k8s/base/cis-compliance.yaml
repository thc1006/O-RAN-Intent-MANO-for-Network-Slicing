---
# CIS Kubernetes Benchmark compliance webhook
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cis-compliance-webhook
  namespace: oran-mano
  labels:
    app.kubernetes.io/name: cis-compliance-webhook
    app.kubernetes.io/component: security-compliance
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: cis-compliance-webhook
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cis-compliance-webhook
        app.kubernetes.io/component: security-compliance
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: runtime/default
        container.apparmor.security.beta.kubernetes.io/webhook: runtime/default
    spec:
      serviceAccountName: cis-compliance-webhook
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: webhook
        image: ghcr.io/oran-mano/cis-compliance-webhook:v1.0.0@sha256:1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef
        imagePullPolicy: IfNotPresent
        ports:
        - name: webhook
          containerPort: 9443
          protocol: TCP
        - name: metrics
          containerPort: 8080
          protocol: TCP
        env:
        - name: TLS_CERT_FILE
          value: /etc/tls/tls.crt
        - name: TLS_PRIVATE_KEY_FILE
          value: /etc/tls/tls.key
        - name: WEBHOOK_PORT
          value: "9443"
        - name: CIS_BENCHMARK_VERSION
          value: "1.6.1"
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
            ephemeral-storage: 1Gi
          requests:
            cpu: 100m
            memory: 128Mi
            ephemeral-storage: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65532
          runAsGroup: 65532
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - name: tls-certs
          mountPath: /etc/tls
          readOnly: true
        - name: temp
          mountPath: /tmp
        - name: cis-config
          mountPath: /etc/cis
          readOnly: true
        livenessProbe:
          httpGet:
            path: /healthz
            port: webhook
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /readyz
            port: webhook
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: tls-certs
        secret:
          secretName: cis-compliance-webhook-certs
      - name: temp
        emptyDir: {}
      - name: cis-config
        configMap:
          name: cis-benchmark-config
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cis-compliance-webhook
  namespace: oran-mano
  labels:
    app.kubernetes.io/name: cis-compliance-webhook
    app.kubernetes.io/component: security-compliance
automountServiceAccountToken: false
---
apiVersion: v1
kind: Service
metadata:
  name: cis-compliance-webhook
  namespace: oran-mano
  labels:
    app.kubernetes.io/name: cis-compliance-webhook
    app.kubernetes.io/component: security-compliance
spec:
  type: ClusterIP
  ports:
  - name: webhook
    port: 443
    targetPort: webhook
    protocol: TCP
  - name: metrics
    port: 8080
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: cis-compliance-webhook
---
# CIS Benchmark configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: cis-benchmark-config
  namespace: oran-mano
  labels:
    app.kubernetes.io/name: cis-compliance-webhook
    app.kubernetes.io/component: security-compliance
data:
  cis-rules.yaml: |
    # CIS Kubernetes Benchmark v1.6.1 Rules
    rules:
      # 5.1 RBAC and Service Accounts
      - id: "5.1.1"
        description: "Ensure that the cluster-admin role is only used where required"
        severity: "high"
        enabled: true
      - id: "5.1.3"
        description: "Minimize wildcard use in Roles and ClusterRoles"
        severity: "medium"
        enabled: true
      - id: "5.1.5"
        description: "Ensure that default service accounts are not actively used"
        severity: "medium"
        enabled: true
      - id: "5.1.6"
        description: "Ensure that Service Account Tokens are only mounted where necessary"
        severity: "medium"
        enabled: true

      # 5.2 Pod Security Policies / Standards
      - id: "5.2.1"
        description: "Minimize the admission of privileged containers"
        severity: "high"
        enabled: true
      - id: "5.2.2"
        description: "Minimize the admission of containers wishing to share the host process ID namespace"
        severity: "high"
        enabled: true
      - id: "5.2.3"
        description: "Minimize the admission of containers wishing to share the host IPC namespace"
        severity: "high"
        enabled: true
      - id: "5.2.4"
        description: "Minimize the admission of containers wishing to share the host network namespace"
        severity: "high"
        enabled: true
      - id: "5.2.5"
        description: "Minimize the admission of containers with allowPrivilegeEscalation"
        severity: "high"
        enabled: true
      - id: "5.2.6"
        description: "Minimize the admission of root containers"
        severity: "high"
        enabled: true
      - id: "5.2.7"
        description: "Minimize the admission of containers with the NET_RAW capability"
        severity: "medium"
        enabled: true
      - id: "5.2.8"
        description: "Minimize the admission of containers with added capabilities"
        severity: "medium"
        enabled: true
      - id: "5.2.9"
        description: "Minimize the admission of containers with capabilities assigned"
        severity: "low"
        enabled: true

      # 5.3 Network Policies and CNI
      - id: "5.3.1"
        description: "Ensure that the CNI in use supports Network Policies"
        severity: "medium"
        enabled: true
      - id: "5.3.2"
        description: "Ensure that all Namespaces have Network Policies defined"
        severity: "medium"
        enabled: true

      # 5.7 General Policies
      - id: "5.7.1"
        description: "Create administrative boundaries between resources using namespaces"
        severity: "medium"
        enabled: true
      - id: "5.7.2"
        description: "Ensure that the seccomp profile is set to docker/default in your pod definitions"
        severity: "medium"
        enabled: true
      - id: "5.7.3"
        description: "Apply Security Context to Your Pods and Containers"
        severity: "high"
        enabled: true
      - id: "5.7.4"
        description: "The default namespace should not be used"
        severity: "medium"
        enabled: true
---
# RBAC for CIS Compliance Webhook
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cis-compliance-webhook
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets", "serviceaccounts", "namespaces"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings", "clusterroles", "clusterrolebindings"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["policy"]
  resources: ["podsecuritypolicies"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cis-compliance-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cis-compliance-webhook
subjects:
- kind: ServiceAccount
  name: cis-compliance-webhook
  namespace: oran-mano
---
# Namespace label to enable security scanning
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-scan-enabler
  namespace: oran-mano
data:
  enable-security-scan.sh: |
    #!/bin/bash
    # Enable security scanning on O-RAN namespaces
    kubectl label namespace oran-mano security-scan=enabled --overwrite
    kubectl label namespace oran-edge security-scan=enabled --overwrite
    kubectl label namespace oran-core security-scan=enabled --overwrite
    kubectl label namespace oran-monitoring security-scan=enabled --overwrite