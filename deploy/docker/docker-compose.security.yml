# O-RAN Intent-MANO Docker Compose Configuration - Security Hardened
# Production-ready configuration with security best practices
version: '3.8'

networks:
  mano-net:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"
    ipam:
      config:
        - subnet: 172.20.0.0/16
  oran-edge:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
    ipam:
      config:
        - subnet: 172.21.0.0/16
  oran-core:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
    ipam:
      config:
        - subnet: 172.22.0.0/16

volumes:
  orchestrator-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/orchestrator
  vnf-operator-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/vnf-operator
  o2-client-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/o2-client
  tn-manager-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/tn-manager
  tn-agent-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/tn-agent
  ran-dms-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/ran-dms
  cn-dms-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/cn-dms

x-common-security: &common-security
  security_opt:
    - no-new-privileges:true
    - apparmor:docker-default
  cap_drop:
    - ALL
  read_only: true
  tmpfs:
    - /tmp:noexec,nosuid,size=100m
    - /var/run:noexec,nosuid,size=50m

x-common-healthcheck: &common-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 45s

services:
  # Core Orchestrator Service
  orchestrator:
    build:
      context: ../../
      dockerfile: deploy/docker/orchestrator/Dockerfile
    image: oran-orchestrator:latest
    container_name: oran-orchestrator
    restart: unless-stopped
    <<: *common-security
    user: "10003:10003"
    networks:
      - mano-net
    ports:
      - "127.0.0.1:8080:8080"
      - "127.0.0.1:9090:9090"
    environment:
      - LOG_LEVEL=info
      - METRICS_ENABLED=true
      - DMS_ENDPOINT=http://ran-dms:8080
      - PORCH_ENDPOINT=http://localhost:7007
    volumes:
      - orchestrator-data:/data:rw
      - ./configs/orchestrator:/config:ro
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8080/health"]
    depends_on:
      - ran-dms
      - cn-dms
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # VNF Operator
  vnf-operator:
    build:
      context: ../../
      dockerfile: deploy/docker/vnf-operator/Dockerfile
    image: oran-vnf-operator:latest
    container_name: oran-vnf-operator
    restart: unless-stopped
    <<: *common-security
    user: "65532:65532"  # distroless nonroot user
    networks:
      - mano-net
    ports:
      - "127.0.0.1:8081:8080"
      - "127.0.0.1:8082:8081"
      - "127.0.0.1:9443:9443"
    environment:
      - LOG_LEVEL=info
      - DMS_ENDPOINT=http://ran-dms:8080
      - PORCH_REPO=http://localhost:7007/api/porch/v1alpha1
    volumes:
      - vnf-operator-data:/data:rw
      - ./configs/vnf-operator:/config:ro
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD", "/manager", "--health-check"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # O2 Client
  o2-client:
    build:
      context: ../../
      dockerfile: deploy/docker/o2-client/Dockerfile
    image: oran-o2-client:latest
    container_name: oran-o2-client
    restart: unless-stopped
    <<: *common-security
    user: "10002:10002"
    networks:
      - mano-net
    ports:
      - "127.0.0.1:8083:8080"
    environment:
      - LOG_LEVEL=info
      - O2IMS_ENDPOINT=https://o2ims.example.com:8443
      - O2DMS_ENDPOINT=https://o2dms.example.com:8443
    volumes:
      - o2-client-data:/data:rw
      - ./configs/o2-client:/config:ro
      - ./certs:/certs:ro
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8080/health"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # RAN DMS
  ran-dms:
    build:
      context: ../../
      dockerfile: deploy/docker/ran-dms/Dockerfile
    image: oran-ran-dms:latest
    container_name: oran-ran-dms
    restart: unless-stopped
    <<: *common-security
    user: "10004:10004"
    networks:
      - mano-net
      - oran-edge
    ports:
      - "127.0.0.1:8084:8080"
      - "127.0.0.1:8444:8443"
    environment:
      - LOG_LEVEL=info
      - DATABASE_URL=postgresql://user:pass@postgres:5432/ran_dms
    volumes:
      - ran-dms-data:/var/lib/ran-dms:rw
      - ./configs/ran-dms:/config:ro
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8080/health"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # CN DMS
  cn-dms:
    build:
      context: ../../
      dockerfile: deploy/docker/cn-dms/Dockerfile
    image: oran-cn-dms:latest
    container_name: oran-cn-dms
    restart: unless-stopped
    <<: *common-security
    user: "10001:10001"
    networks:
      - mano-net
      - oran-core
    ports:
      - "127.0.0.1:8085:8080"
      - "127.0.0.1:8445:8443"
    environment:
      - LOG_LEVEL=info
      - DATABASE_URL=postgresql://user:pass@postgres:5432/cn_dms
    volumes:
      - cn-dms-data:/var/lib/cn-dms:rw
      - ./configs/cn-dms:/config:ro
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8080/health"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # TN Manager
  tn-manager:
    build:
      context: ../../
      dockerfile: deploy/docker/tn-manager/Dockerfile
    image: oran-tn-manager:latest
    container_name: oran-tn-manager
    restart: unless-stopped
    <<: *common-security
    cap_add:
      - NET_ADMIN  # Required for network management
    user: "10007:10007"
    networks:
      - mano-net
    ports:
      - "127.0.0.1:8086:8080"
      - "127.0.0.1:9091:9090"
    environment:
      - LOG_LEVEL=info
      - TN_AGENTS=tn-agent-1:8080,tn-agent-2:8080
    volumes:
      - tn-manager-data:/var/log/tn-manager:rw
      - ./configs/tn-manager:/config:ro
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8080/health"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # TN Agent
  tn-agent:
    build:
      context: ../../
      dockerfile: deploy/docker/tn-agent/Dockerfile
    image: oran-tn-agent:latest
    container_name: oran-tn-agent
    restart: unless-stopped
    <<: *common-security
    cap_add:
      - NET_ADMIN  # Required for traffic control
      - NET_RAW    # Required for network operations
    user: "10006:10006"
    networks:
      - mano-net
    ports:
      - "127.0.0.1:8087:8080"
      - "127.0.0.1:9092:9090"
      - "127.0.0.1:5201:5201"
    environment:
      - LOG_LEVEL=info
      - TN_MANAGER_ENDPOINT=http://tn-manager:8080
    volumes:
      - tn-agent-data:/var/lib/tn-agent:rw
      - ./configs/tn-agent:/config:ro
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8080/health"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Test Framework (only for development/testing)
  test-framework:
    build:
      context: ../../
      dockerfile: deploy/docker/test-framework/Dockerfile
    image: oran-test-framework:latest
    container_name: oran-test-framework
    restart: "no"
    <<: *common-security
    user: "10005:10005"
    cap_add:
      - NET_ADMIN  # Required for network testing
    networks:
      - mano-net
      - oran-edge
      - oran-core
    environment:
      - LOG_LEVEL=info
      - TEST_TIMEOUT=300
    volumes:
      - ./tests:/tests:ro
      - ./experiments:/experiments:ro
      - ./test-results:/results:rw
    command: ["sleep", "infinity"]  # Keep container running for manual test execution
    profiles:
      - testing
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Security scanner (for CI/CD)
  security-scanner:
    image: aquasec/trivy:latest
    container_name: oran-security-scanner
    restart: "no"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./security-reports:/reports:rw
    command: ["sleep", "infinity"]
    profiles:
      - security
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"