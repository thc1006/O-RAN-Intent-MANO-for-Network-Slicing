---
apiVersion: v1
kind: Namespace
metadata:
  name: opentelemetry-operator-system
  labels:
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
    app.kubernetes.io/name: opentelemetry-operator
    app.kubernetes.io/part-of: oran-intent-mano
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: opentelemetry-operator-controller-manager
  namespace: opentelemetry-operator-system
  labels:
    app.kubernetes.io/name: opentelemetry-operator
    app.kubernetes.io/part-of: oran-intent-mano
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: opentelemetry-operator-manager-role
  labels:
    app.kubernetes.io/name: opentelemetry-operator
    app.kubernetes.io/part-of: oran-intent-mano
rules:
- apiGroups: [""]
  resources: ["configmaps", "serviceaccounts", "services"]
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "patch", "update", "watch"]
- apiGroups: ["apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
- apiGroups: ["opentelemetry.io"]
  resources: ["instrumentations", "opentelemetrycollectors"]
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
- apiGroups: ["opentelemetry.io"]
  resources: ["instrumentations/finalizers", "opentelemetrycollectors/finalizers"]
  verbs: ["update"]
- apiGroups: ["opentelemetry.io"]
  resources: ["instrumentations/status", "opentelemetrycollectors/status"]
  verbs: ["get", "patch", "update"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["create", "get", "list", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: opentelemetry-operator-manager-rolebinding
  labels:
    app.kubernetes.io/name: opentelemetry-operator
    app.kubernetes.io/part-of: oran-intent-mano
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: opentelemetry-operator-manager-role
subjects:
- kind: ServiceAccount
  name: opentelemetry-operator-controller-manager
  namespace: opentelemetry-operator-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-operator-controller-manager
  namespace: opentelemetry-operator-system
  labels:
    app.kubernetes.io/name: opentelemetry-operator
    app.kubernetes.io/part-of: oran-intent-mano
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: opentelemetry-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: opentelemetry-operator
        app.kubernetes.io/part-of: oran-intent-mano
      annotations:
        kubectl.kubernetes.io/default-container: manager
    spec:
      serviceAccountName: opentelemetry-operator-controller-manager
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: manager
        image: ghcr.io/open-telemetry/opentelemetry-operator/opentelemetry-operator:0.88.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65532
          runAsGroup: 65532
        args:
        - --metrics-addr=0.0.0.0:8080
        - --enable-leader-election
        - --health-probe-addr=:8081
        - --zap-log-level=info
        - --feature-gates=+operator.autoinstrumentation.go,+operator.autoinstrumentation.java,+operator.autoinstrumentation.nodejs,+operator.autoinstrumentation.python
        env:
        - name: WATCH_NAMESPACE
          value: ""
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: OPERATOR_NAME
          value: opentelemetry-operator
        ports:
        - containerPort: 8080
          name: metrics
          protocol: TCP
        - containerPort: 8081
          name: health
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: health
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: health
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      terminationGracePeriodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-operator-controller-manager-metrics-service
  namespace: opentelemetry-operator-system
  labels:
    app.kubernetes.io/name: opentelemetry-operator
    app.kubernetes.io/part-of: oran-intent-mano
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    app.kubernetes.io/name: opentelemetry-operator
---
# OpenTelemetry Collector for O-RAN Intent MANO
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: oran-otel-collector
  namespace: oran-monitoring
  labels:
    app.kubernetes.io/name: otel-collector
    app.kubernetes.io/part-of: oran-intent-mano
spec:
  mode: daemonset
  serviceAccount: otel-collector-service-account
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    runAsGroup: 65534
    fsGroup: 65534
  tolerations:
  - key: node-role.kubernetes.io/master
    operator: Exists
    effect: NoSchedule
  - key: node-role.kubernetes.io/control-plane
    operator: Exists
    effect: NoSchedule
  config: |
    receivers:
      # OTLP receiver for traces and metrics
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

      # Prometheus receiver for scraping metrics
      prometheus:
        config:
          scrape_configs:
          - job_name: 'oran-components'
            kubernetes_sd_configs:
            - role: pod
              namespaces:
                names:
                - oran-nlp
                - oran-orchestrator
                - oran-ran
                - oran-cn
                - oran-tn
            relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
              action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_pod_name]
              action: replace
              target_label: kubernetes_pod_name

      # Jaeger receiver for traces
      jaeger:
        protocols:
          grpc:
            endpoint: 0.0.0.0:14250
          thrift_http:
            endpoint: 0.0.0.0:14268

      # Kubernetes cluster receiver
      k8s_cluster:
        auth_type: serviceAccount
        node_conditions_to_report: [Ready, MemoryPressure, DiskPressure, PIDPressure]
        distribution: kubernetes
        allocatable_types_to_report: [cpu, memory, storage]

      # Kubernetes events receiver
      k8s_events:
        auth_type: serviceAccount
        namespaces: [oran-nlp, oran-orchestrator, oran-ran, oran-cn, oran-tn, oran-monitoring]

    processors:
      # Batch processor for better performance
      batch:
        timeout: 1s
        send_batch_size: 1024

      # Memory limiter
      memory_limiter:
        limit_mib: 512
        spike_limit_mib: 128

      # Resource processor to add O-RAN specific attributes
      resource:
        attributes:
        - key: cluster.name
          value: oran-intent-mano
          action: upsert
        - key: deployment.environment
          value: production
          action: upsert

      # K8s attributes processor
      k8sattributes:
        auth_type: serviceAccount
        passthrough: false
        filter:
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata:
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.deployment.name
          - k8s.namespace.name
          - k8s.node.name
          - k8s.pod.start_time
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection

      # Probabilistic sampler for traces
      probabilistic_sampler:
        sampling_percentage: 1

      # Attributes processor for O-RAN specific enrichment
      attributes/oran:
        actions:
        - key: oran.component
          from_attribute: k8s.namespace.name
          action: extract
          pattern: ^oran-(.*)$
        - key: oran.intent_id
          from_attribute: http.url
          action: extract
          pattern: /intent/([^/]+)
        - key: oran.slice_id
          from_attribute: slice.id
          action: upsert

    exporters:
      # Prometheus exporter
      prometheus:
        endpoint: "0.0.0.0:8889"
        namespace: oran
        const_labels:
          cluster: oran-intent-mano

      # Jaeger exporter
      jaeger:
        endpoint: jaeger-collector:14250
        tls:
          insecure: true

      # OTLP exporter to Jaeger
      otlp/jaeger:
        endpoint: http://jaeger-collector:4317
        tls:
          insecure: true

      # Logging exporter for debugging
      logging:
        loglevel: info

      # Prometheus remote write
      prometheusremotewrite:
        endpoint: http://prometheus:9090/api/v1/write
        resource_to_telemetry_conversion:
          enabled: true

    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
      pprof:
        endpoint: 0.0.0.0:1777
      zpages:
        endpoint: 0.0.0.0:55679

    service:
      extensions: [health_check, pprof, zpages]
      pipelines:
        traces:
          receivers: [otlp, jaeger]
          processors: [memory_limiter, k8sattributes, attributes/oran, resource, probabilistic_sampler, batch]
          exporters: [jaeger, otlp/jaeger, logging]

        metrics:
          receivers: [otlp, prometheus, k8s_cluster]
          processors: [memory_limiter, k8sattributes, attributes/oran, resource, batch]
          exporters: [prometheus, prometheusremotewrite]

        logs:
          receivers: [otlp, k8s_events]
          processors: [memory_limiter, k8sattributes, attributes/oran, resource, batch]
          exporters: [logging]

      telemetry:
        logs:
          level: "info"
        metrics:
          address: 0.0.0.0:8888
---
# Service Account for OpenTelemetry Collector
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-collector-service-account
  namespace: oran-monitoring
  labels:
    app.kubernetes.io/name: otel-collector
    app.kubernetes.io/part-of: oran-intent-mano
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector-role
  labels:
    app.kubernetes.io/name: otel-collector
    app.kubernetes.io/part-of: oran-intent-mano
rules:
- apiGroups: [""]
  resources: ["events", "namespaces", "namespaces/status", "nodes", "nodes/spec", "pods", "pods/status", "replicationcontrollers", "replicationcontrollers/status", "resourcequotas", "services"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["daemonsets", "deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-collector-role-binding
  labels:
    app.kubernetes.io/name: otel-collector
    app.kubernetes.io/part-of: oran-intent-mano
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otel-collector-role
subjects:
- kind: ServiceAccount
  name: otel-collector-service-account
  namespace: oran-monitoring
---
# Instrumentation configuration for O-RAN components
apiVersion: opentelemetry.io/v1alpha1
kind: Instrumentation
metadata:
  name: oran-instrumentation
  namespace: oran-monitoring
  labels:
    app.kubernetes.io/name: oran-instrumentation
    app.kubernetes.io/part-of: oran-intent-mano
spec:
  exporter:
    endpoint: http://oran-otel-collector:4318
  propagators:
    - tracecontext
    - baggage
    - b3
  sampler:
    type: parentbased_traceidratio
    argument: "0.1"
  go:
    env:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://oran-otel-collector:4318
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=oran-go-service,service.version=1.0.0
  java:
    env:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://oran-otel-collector:4318
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=oran-java-service,service.version=1.0.0
  nodejs:
    env:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://oran-otel-collector:4318
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=oran-nodejs-service,service.version=1.0.0
  python:
    env:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://oran-otel-collector:4318
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=oran-python-service,service.version=1.0.0