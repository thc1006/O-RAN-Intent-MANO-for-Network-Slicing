name: Security Scan (Simplified)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Minimal permissions first, we'll check what's available
permissions:
  contents: read
  actions: read

jobs:
  check-permissions:
    name: Check Available Permissions
    runs-on: ubuntu-latest
    outputs:
      has_security_events: ${{ steps.check.outputs.has_security_events }}
      has_code_scanning: ${{ steps.check.outputs.has_code_scanning }}

    steps:
    - name: Check permissions
      id: check
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        echo "Checking available permissions..."

        # Check if we can access code scanning API
        response=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts")

        if [ "$response" = "200" ] || [ "$response" = "404" ]; then
          echo "Code scanning API accessible"
          echo "has_code_scanning=true" >> $GITHUB_OUTPUT
        else
          echo "Code scanning API not accessible (HTTP $response)"
          echo "has_code_scanning=false" >> $GITHUB_OUTPUT
        fi

        # Check repository visibility
        visibility=$(curl -s \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}" | jq -r .visibility)

        echo "Repository visibility: $visibility"

        # For public repos, security-events should work
        if [ "$visibility" = "public" ]; then
          echo "has_security_events=true" >> $GITHUB_OUTPUT
        else
          echo "has_security_events=false" >> $GITHUB_OUTPUT
        fi

  security-scan-with-upload:
    name: Security Scan (With SARIF Upload)
    runs-on: ubuntu-latest
    needs: check-permissions
    if: needs.check-permissions.outputs.has_code_scanning == 'true'

    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy with SARIF upload
      run: |
        # Install Trivy
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy

        # Run scan
        trivy fs --format sarif --output trivy-results.sarif --severity HIGH,CRITICAL --exit-code 0 .

        echo "SARIF file generated:"
        ls -la trivy-results.sarif

    - name: Upload SARIF to GitHub
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif
        category: trivy-filesystem
      continue-on-error: true

  security-scan-without-upload:
    name: Security Scan (Without SARIF Upload)
    runs-on: ubuntu-latest
    needs: check-permissions
    if: needs.check-permissions.outputs.has_code_scanning == 'false'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Run security scans and generate report
      run: |
        echo "## Security Scan Report" > security-report.md
        echo "Generated: $(date)" >> security-report.md
        echo "" >> security-report.md

        # Install tools
        echo "Installing security tools..."
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy

        # Run GoSec
        echo "### GoSec Results" >> security-report.md
        echo '```' >> security-report.md
        gosec -fmt text ./... 2>&1 | tee -a security-report.md || true
        echo '```' >> security-report.md
        echo "" >> security-report.md

        # Run Trivy
        echo "### Trivy Filesystem Scan" >> security-report.md
        echo '```' >> security-report.md
        trivy fs --severity HIGH,CRITICAL --exit-code 0 . 2>&1 | tee -a security-report.md
        echo '```' >> security-report.md
        echo "" >> security-report.md

        # Check for secrets
        echo "### Basic Secrets Check" >> security-report.md
        echo '```' >> security-report.md
        # Basic patterns for common secrets
        patterns=(
          "AKIA[0-9A-Z]{16}"  # AWS Access Key
          "(?i)api[_-]?key.*[:=].*['\"][0-9a-zA-Z]{32,}['\"]"
          "(?i)secret.*[:=].*['\"][0-9a-zA-Z]{32,}['\"]"
          "(?i)token.*[:=].*['\"][0-9a-zA-Z]{32,}['\"]"
        )

        found_secrets=false
        for pattern in "${patterns[@]}"; do
          if grep -rE "$pattern" --include="*.go" --include="*.yaml" --include="*.yml" --include="*.json" --exclude-dir=vendor --exclude-dir=.git . 2>/dev/null; then
            found_secrets=true
          fi
        done

        if [ "$found_secrets" = true ]; then
          echo "⚠️  Potential secrets detected! Please review." >> security-report.md
        else
          echo "✅ No obvious secrets detected" >> security-report.md
        fi
        echo '```' >> security-report.md

        echo ""
        echo "Security scan complete. Report saved to security-report.md"

    - name: Upload security report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
        retention-days: 30

    - name: Display report summary
      run: |
        echo "## Security Scan Summary"
        echo ""
        if grep -q "CRITICAL" security-report.md; then
          echo "❌ Critical vulnerabilities found"
        elif grep -q "HIGH" security-report.md; then
          echo "⚠️  High severity vulnerabilities found"
        else
          echo "✅ No high or critical vulnerabilities found"
        fi
        echo ""
        echo "Full report available in workflow artifacts"

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      continue-on-error: true
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');

          // Truncate if too long
          const maxLength = 65000;
          const truncatedReport = report.length > maxLength
            ? report.substring(0, maxLength) + '\n\n... (truncated, see artifacts for full report)'
            : report;

          try {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: truncatedReport
            });
          } catch (error) {
            console.log('Could not post comment:', error.message);
          }

  gosec-standalone:
    name: GoSec Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run GoSec
      uses: securego/gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif -severity medium ./...'
      continue-on-error: true

    - name: Check and validate SARIF
      run: |
        if [ -f gosec.sarif ]; then
          echo "GoSec SARIF file generated successfully"
          # Try to parse as JSON to validate
          if python3 -c "import json; json.load(open('gosec.sarif'))" 2>/dev/null; then
            echo "✅ SARIF file is valid JSON"
          else
            echo "⚠️  SARIF file may be invalid, creating minimal valid file"
            cat > gosec.sarif << 'EOF'
        {
          "version": "2.1.0",
          "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
          "runs": [{
            "tool": {
              "driver": {
                "name": "gosec",
                "version": "2.0.0"
              }
            },
            "results": []
          }]
        }
        EOF
          fi
        else
          echo "No GoSec SARIF file generated"
        fi

    - name: Try SARIF upload (if available)
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif
        category: gosec-analysis
      continue-on-error: true

    - name: Upload as artifact (fallback)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: gosec-sarif
        path: gosec.sarif
        retention-days: 7