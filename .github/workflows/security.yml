name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}

permissions:
  contents: read
  security-events: write
  actions: read
  packages: read
  pull-requests: write  # Needed for PR comments
  issues: write  # Needed for creating security issues
  id-token: write  # For OIDC token usage
  attestations: write  # For build attestations

jobs:
  # Code security analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Clean Go module cache
      run: |
        # Clean Go module cache to avoid tar extraction conflicts
        rm -rf ~/go/pkg/mod || true
        go clean -modcache || true

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.6'
        cache: true
        cache-dependency-path: |
          go.sum
          */go.sum
          deploy/docker/*/go.sum

    - name: Configure Git for Go modules
      run: |
        # Configure git to use GitHub token for private repos
        git config --global url."https://${GITHUB_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Clean and prepare Go modules
      run: |
        # Clean module cache to avoid conflicts
        go clean -modcache || true

        # Download all modules first
        go mod download || echo "Some modules may not download, continuing..."

        # Build each module in dependency order
        for module_dir in . pkg/security tn cn-dms ran-dms adapters/vnf-operator; do
          if [ -d "$module_dir" ] && [ -f "$module_dir/go.mod" ]; then
            echo "Building module in $module_dir"
            cd "$module_dir"
            go mod download || echo "Failed to download for $module_dir, continuing..."
            go mod tidy || echo "Failed to tidy for $module_dir, continuing..."
            cd - > /dev/null
          fi
        done

    - name: Build Go modules for CodeQL
      run: |
        # Build main module
        go build -v ./... || echo "Main module build failed, some packages may not be analyzed"

        # Build submodules
        for module_dir in pkg/security tn cn-dms ran-dms; do
          if [ -d "$module_dir" ] && [ -f "$module_dir/go.mod" ]; then
            echo "Building module in $module_dir"
            cd "$module_dir"
            go build -v ./... || echo "Build failed for $module_dir, continuing..."
            cd - > /dev/null
          fi
        done

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Clean Go module cache
      run: |
        # Clean Go module cache to avoid tar extraction conflicts
        rm -rf ~/go/pkg/mod || true
        go clean -modcache || true

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.6'

    - name: Configure Git for Go modules
      run: |
        # Configure git to use GitHub token for private repos
        git config --global url."https://${GITHUB_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

        # Clean module cache to avoid stale dependencies
        go clean -modcache || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate go.sum if missing
      run: |
        if [ ! -f go.sum ]; then
          echo "go.sum is missing, attempting to generate it..."
          # Try to download dependencies with proper authentication
          go mod download || echo "Warning: Some dependencies could not be downloaded"
          go mod tidy || echo "Warning: go mod tidy encountered issues, continuing anyway"
        fi

        # Ensure go.sum exists even if empty
        touch go.sum
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GOPRIVATE: github.com/securecodewarrior

    - name: Run Nancy (Go dependency scanner)
      env:
        OSSINDEX_USERNAME: ${{ secrets.OSSINDEX_USERNAME }}
        OSSINDEX_TOKEN: ${{ secrets.OSSINDEX_TOKEN }}
      run: |
        # Download and install Nancy from official GitHub releases
        # Get the latest release version dynamically
        NANCY_VERSION=$(curl -s https://api.github.com/repos/sonatype-nexus-community/nancy/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')

        # Fallback to a known working version if API call fails
        if [ -z "$NANCY_VERSION" ]; then
          NANCY_VERSION="v1.0.52"
          echo "Using fallback Nancy version: $NANCY_VERSION"
        else
          echo "Installing Nancy version: $NANCY_VERSION"
        fi

        # Construct download URL
        NANCY_URL="https://github.com/sonatype-nexus-community/nancy/releases/download/${NANCY_VERSION}/nancy-${NANCY_VERSION}-linux-amd64"
        echo "Downloading Nancy from: $NANCY_URL"

        # Download the binary for Linux amd64 with better error handling
        if ! curl -L "$NANCY_URL" -o nancy; then
          echo "Failed to download Nancy from primary URL, trying fallback..."
          # Try fallback version
          NANCY_VERSION="v1.0.52"
          NANCY_URL="https://github.com/sonatype-nexus-community/nancy/releases/download/${NANCY_VERSION}/nancy-${NANCY_VERSION}-linux-amd64"
          echo "Trying fallback URL: $NANCY_URL"
          curl -L "$NANCY_URL" -o nancy
        fi

        chmod +x nancy

        # Verify Nancy was downloaded successfully
        if [ ! -f nancy ] || [ ! -s nancy ]; then
          echo "Failed to download Nancy or file is empty"
          ls -la nancy || echo "Nancy file does not exist"
          exit 1
        fi

        echo "Successfully downloaded Nancy:"
        ls -la nancy
        ./nancy --version || echo "Nancy version check failed"

        # Check if go.sum has content before running Nancy
        if [ -s go.sum ]; then
          echo "Running Nancy vulnerability scan..."
          # Use OSS Index credentials if available, otherwise run without (may hit rate limits)
          if [ -n "$OSSINDEX_USERNAME" ] && [ -n "$OSSINDEX_TOKEN" ]; then
            echo "Using OSS Index credentials for authenticated scanning"
            ./nancy sleuth -u "$OSSINDEX_USERNAME" -t "$OSSINDEX_TOKEN" < go.sum
          else
            echo "Warning: Running Nancy without OSS Index credentials (may hit rate limits)"
            echo "To avoid rate limiting, add OSSINDEX_USERNAME and OSSINDEX_TOKEN as GitHub secrets"
            echo "Register at: https://ossindex.sonatype.org/user/register"
            ./nancy sleuth < go.sum
          fi
        else
          echo "Warning: go.sum is empty, skipping Nancy scan"
          echo "This may indicate issues with Go module resolution"
        fi

    - name: Run OSV Scanner
      run: |
        # Install latest OSV scanner - Get latest release dynamically
        LATEST_RELEASE=$(curl -s https://api.github.com/repos/google/osv-scanner/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')

        # Fallback to known working version if API call fails
        if [ -z "$LATEST_RELEASE" ]; then
          LATEST_RELEASE="v1.9.0"
          echo "Using fallback OSV scanner version: $LATEST_RELEASE"
        else
          echo "Installing OSV scanner version: $LATEST_RELEASE"
        fi

        # OSV scanner uses a different naming pattern - no version in filename
        OSV_URL="https://github.com/google/osv-scanner/releases/download/${LATEST_RELEASE}/osv-scanner_linux_amd64"
        echo "Downloading OSV scanner from: $OSV_URL"

        # Download with error handling
        if ! curl -sSfL "$OSV_URL" -o osv-scanner; then
          echo "Failed to download OSV scanner from primary URL, trying fallback..."
          # Try fallback version
          LATEST_RELEASE="v1.9.0"
          OSV_URL="https://github.com/google/osv-scanner/releases/download/${LATEST_RELEASE}/osv-scanner_linux_amd64"
          echo "Trying fallback URL: $OSV_URL"
          curl -sSfL "$OSV_URL" -o osv-scanner
        fi

        chmod +x osv-scanner

        # Verify download
        if [ ! -f osv-scanner ] || [ ! -s osv-scanner ]; then
          echo "Failed to download OSV scanner or file is empty"
          exit 1
        fi

        echo "Successfully downloaded OSV scanner:"
        ls -la osv-scanner
        ./osv-scanner --version || echo "OSV scanner version check failed"

        # Run scan with SARIF output
        ./osv-scanner --recursive --skip-git --format sarif --output osv-results.sarif ./ || true
        # Fallback to JSON if SARIF fails
        if [ ! -f osv-results.sarif ] || [ ! -s osv-results.sarif ]; then
          ./osv-scanner --recursive --skip-git --format json --output osv-results.json ./ || true
        fi

    - name: Upload OSV Scanner results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('osv-results.sarif') != ''
      with:
        sarif_file: 'osv-results.sarif'
        category: 'osv-scanner'
        wait-for-processing: false
      continue-on-error: true

  # Container image security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    timeout-minutes: 60

    strategy:
      matrix:
        component:
          - orchestrator
          - vnf-operator
          - o2-client
          - tn-manager
          - tn-agent
          - ran-dms
          - cn-dms

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64
        driver-opts: |
          image=moby/buildkit:latest
          network=host

    - name: Build image for scanning
      uses: docker/build-push-action@v6
      id: build
      with:
        context: .
        file: deploy/docker/${{ matrix.component }}/Dockerfile
        tags: |
          local/oran-${{ matrix.component }}:scan
          local/oran-${{ matrix.component }}:${{ github.sha }}
        load: true
        cache-from: type=gha,scope=${{ matrix.component }}
        cache-to: type=gha,mode=max,scope=${{ matrix.component }}
        platforms: linux/amd64
        provenance: false
        sbom: false
      timeout-minutes: 30

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.24.0
      with:
        image-ref: local/oran-${{ matrix.component }}:scan
        format: 'sarif'
        output: 'trivy-results-${{ matrix.component }}.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        scanners: 'vuln,secret,config'
        timeout: '10m'
        exit-code: '0'
        ignore-unfixed: true
        skip-db-update: false
        skip-java-db-update: false
      timeout-minutes: 15

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.component }}.sarif'
        category: 'trivy-${{ matrix.component }}'
        wait-for-processing: false
      continue-on-error: true

    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v4
      id: grype-scan
      with:
        image: local/oran-${{ matrix.component }}:scan
        severity-cutoff: medium
        fail-build: false
        output-format: sarif
        add-cpes-if-none: true
      timeout-minutes: 15

    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: ${{ steps.grype-scan.outputs.sarif }}
        category: 'grype-${{ matrix.component }}'
        wait-for-processing: false
      continue-on-error: true

    - name: Run Snyk container scan
      uses: snyk/actions/docker@0.4.0
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: local/oran-${{ matrix.component }}:scan
        args: --severity-threshold=medium --file=deploy/docker/${{ matrix.component }}/Dockerfile --sarif-file-output=snyk-${{ matrix.component }}.sarif --json-file-output=snyk-${{ matrix.component }}.json
      continue-on-error: true
      timeout-minutes: 10

    - name: Upload Snyk scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('snyk-${{ matrix.component }}.sarif') != ''
      with:
        sarif_file: 'snyk-${{ matrix.component }}.sarif'
        category: 'snyk-${{ matrix.component }}'
        wait-for-processing: false
      continue-on-error: true

    - name: Collect and upload container scan artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-scan-results-${{ matrix.component }}
        path: |
          trivy-results-${{ matrix.component }}.sarif
          snyk-${{ matrix.component }}.sarif
          snyk-${{ matrix.component }}.json
          grype-*.sarif
        retention-days: 30

    - name: Generate container scan summary
      if: always()
      run: |
        echo "## Container Security Scan Summary - ${{ matrix.component }}" >> container-scan-summary.md
        echo "" >> container-scan-summary.md
        echo "- **Image**: local/oran-${{ matrix.component }}:scan" >> container-scan-summary.md
        echo "- **Build Status**: ${{ steps.build.outcome }}" >> container-scan-summary.md
        echo "- **Scan Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> container-scan-summary.md
        echo "" >> container-scan-summary.md

        # Check for scan results
        if [ -f "trivy-results-${{ matrix.component }}.sarif" ]; then
          echo "- ✅ Trivy scan completed" >> container-scan-summary.md
        else
          echo "- ❌ Trivy scan failed" >> container-scan-summary.md
        fi

        if [ -f "snyk-${{ matrix.component }}.sarif" ]; then
          echo "- ✅ Snyk scan completed" >> container-scan-summary.md
        else
          echo "- ❌ Snyk scan failed or skipped" >> container-scan-summary.md
        fi

        if [ -f grype-*.sarif ]; then
          echo "- ✅ Grype scan completed" >> container-scan-summary.md
        else
          echo "- ❌ Grype scan failed" >> container-scan-summary.md
        fi

        echo "" >> container-scan-summary.md

    - name: Upload container scan summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-scan-summary-${{ matrix.component }}
        path: container-scan-summary.md
        retention-days: 30

  # Kubernetes security scanning
  k8s-security:
    name: Kubernetes Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov on Kubernetes manifests
      uses: bridgecrewio/checkov-action@master
      with:
        directory: deploy/k8s
        framework: kubernetes
        output_format: sarif
        output_file_path: checkov-k8s.sarif

    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-k8s.sarif
        category: 'checkov-k8s'
        wait-for-processing: false
      continue-on-error: true

    - name: Run Kubesec scan
      run: |
        curl -sSX POST --data-binary @deploy/k8s/base/orchestrator.yaml \
          https://v2.kubesec.io/scan > kubesec-orchestrator.json

        curl -sSX POST --data-binary @deploy/k8s/base/vnf-operator.yaml \
          https://v2.kubesec.io/scan > kubesec-vnf-operator.json

    - name: Upload Kubesec results
      uses: actions/upload-artifact@v4
      with:
        name: kubesec-results
        path: kubesec-*.json

    - name: Run Polaris security audit
      run: |
        curl -L https://github.com/FairwindsOps/polaris/releases/latest/download/polaris_linux_amd64.tar.gz | tar xz
        # Audit all YAML files in the deploy/k8s directory
        find deploy/k8s -name "*.yaml" -o -name "*.yml" | while read file; do
          echo "Auditing $file"
          ./polaris audit --audit-path "$file" --format=json >> polaris-audit.json
        done
        # If no results were generated, create an empty JSON array
        if [ ! -s polaris-audit.json ]; then
          echo '{"results": []}' > polaris-audit.json
        fi

    - name: Upload Polaris results
      uses: actions/upload-artifact@v4
      with:
        name: polaris-audit
        path: polaris-audit.json

  # Infrastructure as Code security
  iac-security:
    name: Infrastructure as Code Security
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov on Dockerfile
      uses: bridgecrewio/checkov-action@master
      with:
        directory: deploy/docker
        framework: dockerfile
        output_format: sarif
        output_file_path: checkov-docker.sarif

    - name: Upload Checkov Docker results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-docker.sarif
        category: 'checkov-docker'
        wait-for-processing: false
      continue-on-error: true

    - name: Run Checkov on Helm charts
      uses: bridgecrewio/checkov-action@master
      with:
        directory: deploy/helm
        framework: helm
        output_format: sarif
        output_file_path: checkov-helm.sarif

    - name: Upload Checkov Helm results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-helm.sarif
        category: 'checkov-helm'
        wait-for-processing: false
      continue-on-error: true

    - name: Run Hadolint on Dockerfiles
      run: |
        # Install latest hadolint
        wget -q https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
        chmod +x hadolint-Linux-x86_64

        # Initialize SARIF output
        cat > hadolint.sarif << 'EOF'
        {
          "version": "2.1.0",
          "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
          "runs": [{
            "tool": {
              "driver": {
                "name": "hadolint",
                "version": "2.12.0",
                "informationUri": "https://github.com/hadolint/hadolint"
              }
            },
            "results": []
          }]
        }
        EOF

        # Run hadolint on all Dockerfiles with JSON output
        find deploy/docker -name "Dockerfile" | while read dockerfile; do
          echo "Checking $dockerfile"
          # Run hadolint with JSON output for better parsing
          ./hadolint-Linux-x86_64 --format json "$dockerfile" > "hadolint-$(basename $(dirname $dockerfile)).json" || true
          # Also run with text output for logging
          ./hadolint-Linux-x86_64 "$dockerfile" || true
        done

        # Create comprehensive scan summary
        echo "## Hadolint Scan Results" > hadolint-summary.md
        echo "" >> hadolint-summary.md
        find deploy/docker -name "Dockerfile" | while read dockerfile; do
          component=$(basename $(dirname $dockerfile))
          echo "### $component" >> hadolint-summary.md
          if [ -f "hadolint-$component.json" ] && [ -s "hadolint-$component.json" ]; then
            echo "- ✅ Dockerfile scanned successfully" >> hadolint-summary.md
          else
            echo "- ❌ Dockerfile scan failed or no issues found" >> hadolint-summary.md
          fi
          echo "" >> hadolint-summary.md
        done

    - name: Upload Hadolint results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: hadolint.sarif
        category: 'hadolint'
        wait-for-processing: false
      continue-on-error: true

    - name: Upload Hadolint artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: hadolint-results
        path: |
          hadolint*.json
          hadolint-summary.md
          hadolint.sarif
        retention-days: 30

  # Secrets scanning
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Create Gitleaks config if not exists
      run: |
        if [ ! -f .gitleaks.toml ]; then
          cat > .gitleaks.toml << 'EOF'
        # Gitleaks configuration for O-RAN Intent-MANO
        title = "O-RAN Intent-MANO Security Configuration"

        [[rules]]
        description = "Generic API Key"
        id = "generic-api-key"
        regex = '''(?i)(?:api_?key|apikey|secret_?key|secretkey)(?:\s*[:=]\s*)["']?[a-zA-Z0-9_\-]{16,}["']?'''
        tags = ["key", "API", "generic"]

        [[rules]]
        description = "High Entropy"
        id = "high-entropy"
        regex = '''[A-Za-z0-9+\/]{40,}={0,2}'''
        entropy = 4.5
        tags = ["entropy"]

        [allowlist]
        description = "Allowlisted files"
        files = [
          '''\.env\.sample$''',
          '''README\.md$''',
          '''\.github/workflows/.*\.yml$''',
          '''\.gitleaks\.toml$'''
        ]

        paths = [
          '''vendor/''',
          '''node_modules/''',
          '''\.git/'''
        ]
        EOF
        fi

    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2.3.6
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_ENABLE_COMMENTS: false
      with:
        config-path: .gitleaks.toml
      continue-on-error: true

    - name: Run TruffleHog (PR)
      if: github.event_name == 'pull_request'
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.pull_request.base.sha }}
        head: ${{ github.event.pull_request.head.sha }}
        extra_args: --debug --only-verified
      continue-on-error: true

    - name: Run TruffleHog (Push)
      if: github.event_name == 'push'
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.before }}
        head: ${{ github.event.after }}
        extra_args: --debug --only-verified
      continue-on-error: true

    - name: Run TruffleHog (Other events)
      if: github.event_name != 'pull_request' && github.event_name != 'push'
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        extra_args: --debug --only-verified
      continue-on-error: true

    - name: Upload secrets scan artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: secrets-scan-results
        path: |
          gitleaks-report.json
          trufflehog-*.json
        retention-days: 30

  # License compliance
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Clean Go module cache
      run: |
        # Clean Go module cache to avoid tar extraction conflicts
        rm -rf ~/go/pkg/mod || true
        go clean -modcache || true

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.6'

    - name: Configure Git for Go modules
      run: |
        # Configure git to use GitHub token for private repos
        git config --global url."https://${GITHUB_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Install go-licenses
      run: go install github.com/google/go-licenses@latest

    - name: Check Go module licenses
      run: |
        find . -name "go.mod" -execdir go-licenses check ./... \;

    - name: Generate license report
      run: |
        mkdir -p license-reports
        find . -name "go.mod" -exec dirname {} \; | while read dir; do
          component=$(basename "$dir")
          go-licenses csv "$dir/..." > "license-reports/$component-licenses.csv" || true
        done

    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: license-reports/

  # Security policy compliance
  compliance-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check security policy files
      run: |
        # Check for required security files
        files=("SECURITY.md" "deploy/k8s/base/rbac.yaml" ".github/workflows/security.yml")

        for file in "${files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "::error::Required security file missing: $file"
            exit 1
          fi
        done

    - name: Validate RBAC policies
      run: |
        # Basic RBAC validation - check for presence of both apiGroups and verbs
        if ! grep -q "apiGroups" deploy/k8s/base/rbac.yaml || ! grep -q "verbs" deploy/k8s/base/rbac.yaml; then
          echo "::error::RBAC policies appear incomplete - missing apiGroups or verbs"
          exit 1
        fi
        echo "RBAC validation passed - found both apiGroups and verbs"

    - name: Check Dockerfile security practices
      run: |
        # Check for security best practices in Dockerfiles
        find deploy/docker -name "Dockerfile" | while read dockerfile; do
          echo "Checking $dockerfile"

          # Check for non-root user
          if ! grep -q "USER.*[^0]" "$dockerfile"; then
            echo "::warning::$dockerfile may not specify non-root user"
          fi

          # Check for security context
          if ! grep -q "runAsNonRoot\|runAsUser" "$dockerfile"; then
            echo "::warning::$dockerfile may not have security context"
          fi
        done

  # Generate security report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, container-scan, k8s-security, iac-security, secrets-scan, license-scan, compliance-check]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate comprehensive security summary
      run: |
        cat > security-summary.md << 'EOF'
        # O-RAN Intent-MANO Security Report

        **Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Commit**: ${{ github.sha }}
        **Workflow Run**: ${{ github.run_id }}
        **Branch**: ${{ github.ref_name }}
        **Event**: ${{ github.event_name }}

        ## 📊 Security Scan Results Overview

        | Scan Type | Status | Description |
        |-----------|--------|-------------|
        | 🔍 CodeQL Analysis | ${{ needs.codeql.result }} | Static code analysis for security vulnerabilities |
        | 📦 Dependency Scan | ${{ needs.dependency-scan.result }} | Vulnerability scan of Go dependencies |
        | 🐳 Container Scan | ${{ needs.container-scan.result }} | Multi-scanner container vulnerability assessment |
        | ☸️ Kubernetes Security | ${{ needs.k8s-security.result }} | K8s manifest security configuration review |
        | 🏗️ IaC Security | ${{ needs.iac-security.result }} | Infrastructure as Code security analysis |
        | 🔑 Secrets Scan | ${{ needs.secrets-scan.result }} | Detection of exposed secrets and credentials |
        | 📄 License Compliance | ${{ needs.license-scan.result }} | Open source license compliance check |
        | ✅ Compliance Check | ${{ needs.compliance-check.result }} | Security policy compliance validation |

        ## 🛡️ Container Security Details

        The following container images were scanned using multiple security tools:

        - **orchestrator**: O-RAN orchestration service
        - **vnf-operator**: VNF lifecycle management operator
        - **o2-client**: O2 interface client implementation
        - **tn-manager**: Transport network management service
        - **tn-agent**: Transport network agent service
        - **ran-dms**: RAN domain management service
        - **cn-dms**: Core network domain management service

        ### Security Scanners Used:
        - **Trivy v0.24.0**: Comprehensive vulnerability scanner with secret detection
        - **Grype v4.x**: Anchore vulnerability scanner with CPE enrichment
        - **Snyk v0.4.0**: Commercial grade vulnerability and compliance scanner

        ## 🔧 Tools and Versions

        | Tool | Version | Purpose |
        |------|---------|---------|
        | Go | 1.23.4 | Build environment |
        | Trivy | 0.24.0 | Container vulnerability scanning |
        | Grype | v4.x | Container vulnerability scanning |
        | Snyk | 0.4.0 | Security and compliance scanning |
        | OSV Scanner | 1.8.5 | Open source vulnerability database |
        | Gitleaks | 2.3.6 | Secret detection |
        | TruffleHog | latest | Advanced secret detection |
        | Hadolint | 2.12.0 | Dockerfile linting |
        | Checkov | latest | Infrastructure security scanning |

        ## 📋 Security Recommendations

        ### 🔴 Critical Actions Required:
        - [ ] Review and remediate all CRITICAL severity vulnerabilities
        - [ ] Address any secrets detected by scanning tools
        - [ ] Ensure all containers run with non-root users
        - [ ] Verify proper RBAC configurations

        ### 🟡 Best Practices:
        - [ ] Regularly update base images (monthly)
        - [ ] Monitor CVE databases for newly disclosed vulnerabilities
        - [ ] Implement automated dependency updates where possible
        - [ ] Review and rotate secrets quarterly
        - [ ] Maintain security documentation up-to-date

        ### 🟢 Continuous Monitoring:
        - [ ] Set up alerts for new vulnerabilities in dependencies
        - [ ] Schedule regular security scans (daily/weekly)
        - [ ] Monitor security advisory feeds
        - [ ] Track security metrics and trends

        ## 📁 Available Artifacts

        The following security scan artifacts are available for download:

        - **Container scan results**: SARIF files for each component
        - **Dependency scan reports**: Nancy, OSV Scanner results
        - **Secrets scan output**: Gitleaks and TruffleHog reports
        - **License compliance**: License inventory and compliance reports
        - **Infrastructure analysis**: Kubernetes and Dockerfile security reports
        - **Detailed summaries**: Component-specific security summaries

        ## 🚨 Alert Thresholds

        | Severity | Action Required | Timeframe |
        |----------|----------------|-----------|
        | CRITICAL | Immediate remediation | < 24 hours |
        | HIGH | Priority remediation | < 7 days |
        | MEDIUM | Scheduled remediation | < 30 days |
        | LOW | Review and track | < 90 days |

        ## 📞 Security Contact

        For security-related issues or questions:
        - **Repository Owner**: @${{ github.repository_owner }}
        - **Security Team**: [Create security issue](https://github.com/${{ github.repository }}/issues/new?labels=security&template=security_issue.md)

        ---

        *This report was automatically generated by the O-RAN Intent-MANO security pipeline.*
        EOF

    - name: Generate security metrics
      run: |
        echo "Collecting security metrics..."

        # Initialize metrics file
        cat > security-metrics.json << 'EOF'
        {
          "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "workflow_run": "${{ github.run_id }}",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "event": "${{ github.event_name }}",
          "scan_results": {
            "codeql": "${{ needs.codeql.result }}",
            "dependency_scan": "${{ needs.dependency-scan.result }}",
            "container_scan": "${{ needs.container-scan.result }}",
            "k8s_security": "${{ needs.k8s-security.result }}",
            "iac_security": "${{ needs.iac-security.result }}",
            "secrets_scan": "${{ needs.secrets-scan.result }}",
            "license_scan": "${{ needs.license-scan.result }}",
            "compliance_check": "${{ needs.compliance-check.result }}"
          },
          "components_scanned": [
            "orchestrator",
            "vnf-operator",
            "o2-client",
            "tn-manager",
            "tn-agent",
            "ran-dms",
            "cn-dms"
          ],
          "tools_versions": {
            "go": "1.23.6",
            "trivy": "0.24.0",
            "grype": "v4.x",
            "snyk": "0.4.0",
            "osv_scanner": "1.8.5",
            "gitleaks": "2.3.6",
            "hadolint": "2.12.0"
          }
        }
        EOF

        # Count artifacts generated
        ARTIFACT_COUNT=$(find . -name "*.sarif" -o -name "*.json" -o -name "*-summary.md" | wc -l)
        echo "Generated $ARTIFACT_COUNT security artifacts"

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: |
          security-summary.md
          security-metrics.json
        retention-days: 90

    - name: Post security summary to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  # Security incident response
  incident-response:
    name: Security Incident Response
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, container-scan, secrets-scan]
    if: failure() && (needs.codeql.result == 'failure' || needs.dependency-scan.result == 'failure' || needs.container-scan.result == 'failure' || needs.secrets-scan.result == 'failure')

    steps:
    - name: Log security alert
      run: |
        echo "🚨 SECURITY ALERT: Critical vulnerabilities detected"
        echo "================================================="
        echo "Commit: ${{ github.sha }}"
        echo ""
        echo "Affected Scans:"
        echo "- CodeQL: ${{ needs.codeql.result }}"
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}"
        echo "- Container Scan: ${{ needs.container-scan.result }}"
        echo "- Secrets Scan: ${{ needs.secrets-scan.result }}"
        echo ""
        echo "Action Required:"
        echo "1. Review scan results in the workflow run"
        echo "2. Address critical and high severity issues"
        echo "3. Re-run security scans to verify fixes"
        echo ""
        echo "Security Contact: @${{ github.repository_owner }}"

    - name: Create security issue (if permissions available)
      uses: actions/github-script@v6
      continue-on-error: true
      with:
        script: |
          try {
            const title = `🚨 Security Alert: Critical vulnerabilities detected in ${context.sha.substring(0, 7)}`;
            const body = `
            ## Security Alert

            Critical security vulnerabilities have been detected in commit ${context.sha}.

            **Affected Scans:**
            - CodeQL: ${{ needs.codeql.result }}
            - Dependency Scan: ${{ needs.dependency-scan.result }}
            - Container Scan: ${{ needs.container-scan.result }}
            - Secrets Scan: ${{ needs.secrets-scan.result }}

            **Action Required:**
            1. Review scan results in the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            2. Address critical and high severity issues
            3. Re-run security scans to verify fixes

            **Security Contact:** @${context.repo.owner}
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'critical', 'incident']
            });
            console.log('Security issue created successfully');
          } catch (error) {
            console.log('Unable to create issue (likely due to permissions). Security alert logged to workflow output.');
            console.log('Error:', error.message);
          }

    - name: Generate security incident summary
      run: |
        echo "🚨 SECURITY INCIDENT SUMMARY" > incident-summary.md
        echo "=============================" >> incident-summary.md
        echo "" >> incident-summary.md
        echo "**Incident ID**: SEC-${{ github.run_id }}" >> incident-summary.md
        echo "**Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> incident-summary.md
        echo "**Commit**: ${{ github.sha }}" >> incident-summary.md
        echo "**Branch**: ${{ github.ref_name }}" >> incident-summary.md
        echo "" >> incident-summary.md
        echo "## Failed Security Scans:" >> incident-summary.md
        echo "" >> incident-summary.md
        echo "- CodeQL Analysis: ${{ needs.codeql.result }}" >> incident-summary.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> incident-summary.md
        echo "- Container Scan: ${{ needs.container-scan.result }}" >> incident-summary.md
        echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> incident-summary.md
        echo "" >> incident-summary.md
        echo "## Immediate Actions Required:" >> incident-summary.md
        echo "" >> incident-summary.md
        echo "1. 🔍 Review detailed scan results in workflow artifacts" >> incident-summary.md
        echo "2. 🛠️ Address all CRITICAL and HIGH severity issues" >> incident-summary.md
        echo "3. 🔒 Remove any exposed secrets or credentials" >> incident-summary.md
        echo "4. ✅ Re-run security scans to verify fixes" >> incident-summary.md
        echo "5. 📋 Update security documentation if needed" >> incident-summary.md
        echo "" >> incident-summary.md
        echo "## Resources:" >> incident-summary.md
        echo "" >> incident-summary.md
        echo "- [Security Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> incident-summary.md
        echo "- [Security Policy](https://github.com/${{ github.repository }}/blob/main/SECURITY.md)" >> incident-summary.md
        echo "- [Incident Response Guide](https://github.com/${{ github.repository }}/docs/security/incident-response.md)" >> incident-summary.md

    - name: Upload incident summary
      uses: actions/upload-artifact@v4
      with:
        name: security-incident-summary
        path: incident-summary.md
        retention-days: 365

    - name: Block deployment on critical issues
      run: |
        echo "::error::🚨 Critical security vulnerabilities detected! Deployment blocked."
        echo "::error::Incident ID: SEC-${{ github.run_id }}"
        echo "::error::Please review the security incident summary and fix all issues before proceeding."
        echo ""
        echo "Failed scans:"
        echo "- CodeQL: ${{ needs.codeql.result }}"
        echo "- Dependencies: ${{ needs.dependency-scan.result }}"
        echo "- Containers: ${{ needs.container-scan.result }}"
        echo "- Secrets: ${{ needs.secrets-scan.result }}"
        echo ""
        echo "📥 Download the 'security-incident-summary' artifact for detailed remediation steps."
        exit 1